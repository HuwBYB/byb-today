import React, { useEffect, useMemo, useState, createContext, useContext } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Separator } from "@/components/ui/separator";
import { cn } from "@/lib/utils";

/**
 * BYB Theme System v3 — React edition
 * - Supports theme families: "pastel" | "mono-light" | "mono-dark" | "deep"
 * - Pastel uses data-accent: "lavender" | "mint" | "sky" | "peach" | "lemon"
 * - Deep uses data-deepaccent: "indigo" | "emerald" | "rose" | "cobalt" | "purple"
 * - Monochrome ignores accents
 * - Persists to localStorage (keys below)
 * - Applies data attributes to document.documentElement
 */

type ThemeFamily = "pastel" | "mono-light" | "mono-dark" | "deep";
type PastelAccent = "lavender" | "mint" | "sky" | "peach" | "lemon";
type DeepAccent = "indigo" | "emerald" | "rose" | "cobalt" | "purple";

const KEY_THEME = "byb_theme";
const KEY_ACCENT = "byb_accent";
const KEY_DEEP = "byb_deepaccent";

export type ThemeState = {
  theme: ThemeFamily;
  accent: PastelAccent; // used if theme === "pastel"
  deepaccent: DeepAccent; // used if theme === "deep"
};

const defaultState: ThemeState = { theme: "pastel", accent: "lavender", deepaccent: "indigo" };

function readState(): ThemeState {
  try {
    const theme = (localStorage.getItem(KEY_THEME) as ThemeFamily) || defaultState.theme;
    const accent = (localStorage.getItem(KEY_ACCENT) as PastelAccent) || defaultState.accent;
    const deepaccent = (localStorage.getItem(KEY_DEEP) as DeepAccent) || defaultState.deepaccent;
    return { theme, accent, deepaccent };
  } catch {
    return defaultState;
  }
}

function writeState(state: ThemeState) {
  try {
    localStorage.setItem(KEY_THEME, state.theme);
    localStorage.setItem(KEY_ACCENT, state.accent);
    localStorage.setItem(KEY_DEEP, state.deepaccent);
  } catch {}
}

function applyToDOM(state: ThemeState) {
  const root = document.documentElement as HTMLElement & {
    dataset: DOMStringMap & { theme?: ThemeFamily; accent?: PastelAccent; deepaccent?: DeepAccent };
  };

  root.dataset.theme = state.theme;

  if (state.theme === "pastel") {
    if (state.accent === "lavender") delete root.dataset.accent; // lavender is default (no attribute)
    else root.dataset.accent = state.accent;
    delete root.dataset.deepaccent;
  } else if (state.theme === "deep") {
    delete root.dataset.accent;
    root.dataset.deepaccent = state.deepaccent;
  } else {
    // mono-light / mono-dark
    delete root.dataset.accent;
    delete root.dataset.deepaccent;
  }
}

// ---------- Context for app-wide access ----------
const ThemeContext = createContext<{ state: ThemeState; setState: React.Dispatch<React.SetStateAction<ThemeState>> } | null>(null);

export function useBYBTheme() {
  const ctx = useContext(ThemeContext);
  if (!ctx) throw new Error("useBYBTheme must be used within <BYBThemeProvider>");
  return ctx;
}

export function BYBThemeProvider({ children }: { children: React.ReactNode }) {
  const [state, setState] = useState<ThemeState>(defaultState);

  // Load from storage once (SSR-safe guard)
  useEffect(() => {
    setState(readState());
  }, []);

  // Apply + persist whenever state changes
  useEffect(() => {
    applyToDOM(state);
    writeState(state);
  }, [state]);

  // Prevent FOUC by applying immediately if localStorage already has values
  useEffect(() => {
    try {
      const cached = readState();
      applyToDOM(cached);
    } catch {}
  }, []);

  const value = useMemo(() => ({ state, setState }), [state]);

  return <ThemeContext.Provider value={value}>{children}</ThemeContext.Provider>;
}

// ---------- UI: Profile → Appearance picker ----------

const pastelAccents: { value: PastelAccent; label: string }[] = [
  { value: "lavender", label: "Lavender" },
  { value: "mint", label: "Mint" },
  { value: "sky", label: "Sky" },
  { value: "peach", label: "Peach" },
  { value: "lemon", label: "Lemon" },
];

const deepAccents: { value: DeepAccent; label: string }[] = [
  { value: "indigo", label: "Indigo" },
  { value: "emerald", label: "Emerald" },
  { value: "rose", label: "Rose" },
  { value: "cobalt", label: "Cobalt" },
  { value: "purple", label: "Purple" },
];

const themeFamilies: { value: ThemeFamily; label: string; desc?: string }[] = [
  { value: "pastel", label: "Pastel", desc: "Light, soft surfaces with gentle washes" },
  { value: "mono-light", label: "Monochrome (Light)", desc: "Clean grayscale, no accents" },
  { value: "mono-dark", label: "Monochrome (Dark)", desc: "Dim grayscale, high legibility" },
  { value: "deep", label: "Deep", desc: "Vivid, high-contrast with rich accents" },
];

function Swatch({ className }: { className?: string }) {
  return <div className={cn("size-6 rounded-lg border", className)} />;
}

export default function ThemePicker() {
  const { state, setState } = useBYBTheme();

  return (
    <Card className="shadow-sm">
      <CardHeader>
        <CardTitle className="text-xl">Appearance</CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* Theme Family */}
        <div className="space-y-2">
          <Label className="text-muted-foreground">Theme family</Label>
          <RadioGroup
            value={state.theme}
            onValueChange={(v) =>
              setState((s) => ({ ...s, theme: v as ThemeFamily }))
            }
            className="grid gap-2 sm:grid-cols-2 lg:grid-cols-4"
          >
            {themeFamilies.map((t) => (
              <div key={t.value} className="flex items-center gap-3 rounded-2xl border p-3">
                <RadioGroupItem id={`theme-${t.value}`} value={t.value} />
                <Label htmlFor={`theme-${t.value}`} className="flex-1 cursor-pointer">
                  <div className="font-medium">{t.label}</div>
                  {t.desc && <div className="text-xs text-muted-foreground">{t.desc}</div>}
                </Label>
              </div>
            ))}
          </RadioGroup>
        </div>

        <Separator />

        {/* Pastel accents */}
        {state.theme === "pastel" && (
          <div className="space-y-2">
            <Label className="text-muted-foreground">Pastel accent</Label>
            <RadioGroup
              value={state.accent}
              onValueChange={(v) => setState((s) => ({ ...s, accent: v as PastelAccent }))}
              className="grid gap-2 sm:grid-cols-2 lg:grid-cols-5"
            >
              {pastelAccents.map((a) => (
                <div key={a.value} className="flex items-center gap-3 rounded-2xl border p-3">
                  <RadioGroupItem id={`accent-${a.value}`} value={a.value} />
                  <Label htmlFor={`accent-${a.value}`} className="flex-1 cursor-pointer flex items-center gap-2">
                    <span>{a.label}</span>
                    <Swatch className={
                      a.value === "lavender"
                        ? "bg-gradient-to-br from-[#6d28d9] to-[hsl(258_85%_80%)]"
                        : a.value === "mint"
                        ? "bg-gradient-to-br from-[#059669] to-[hsl(152_60%_78%)]"
                        : a.value === "sky"
                        ? "bg-gradient-to-br from-[#0284c7] to-[hsl(210_95%_78%)]"
                        : a.value === "peach"
                        ? "bg-gradient-to-br from-[#ea580c] to-[hsl(16_90%_85%)]"
                        : "bg-gradient-to-br from-[#ca8a04] to-[hsl(50_98%_80%)]"
                    } />
                  </Label>
                </div>
              ))}
            </RadioGroup>
          </div>
        )}

        {/* Deep accents */}
        {state.theme === "deep" && (
          <div className="space-y-2">
            <Label className="text-muted-foreground">Deep accent</Label>
            <RadioGroup
              value={state.deepaccent}
              onValueChange={(v) => setState((s) => ({ ...s, deepaccent: v as DeepAccent }))}
              className="grid gap-2 sm:grid-cols-2 lg:grid-cols-5"
            >
              {deepAccents.map((a) => (
                <div key={a.value} className="flex items-center gap-3 rounded-2xl border p-3">
                  <RadioGroupItem id={`deep-${a.value}`} value={a.value} />
                  <Label htmlFor={`deep-${a.value}`} className="flex-1 cursor-pointer flex items-center gap-2">
                    <span className="capitalize">{a.label}</span>
                    <Swatch className={
                      a.value === "indigo"
                        ? "bg-gradient-to-br from-[#5b21b6] to-[#0b1220]"
                        : a.value === "emerald"
                        ? "bg-gradient-to-br from-[#047857] to-[#0b1220]"
                        : a.value === "rose"
                        ? "bg-gradient-to-br from-[#be123c] to-[#0b1220]"
                        : a.value === "cobalt"
                        ? "bg-gradient-to-br from-[#1d4ed8] to-[#0b1220]"
                        : "bg-gradient-to-br from-[#7c3aed] to-[#0b1220]"
                    } />
                  </Label>
                </div>
              ))}
            </RadioGroup>
          </div>
        )}

        <Separator />

        {/* Preview */}
        <div className="space-y-3">
          <div className="text-sm text-muted-foreground">Preview</div>
          <div className="rounded-2xl border p-3 space-y-3">
            <div className="flex flex-wrap gap-2">
              <Button>Primary</Button>
              <Button variant="secondary">Secondary</Button>
              <Button variant="outline">Outline</Button>
              <Button variant="ghost">Ghost</Button>
            </div>
            <div className="h-2 w-full rounded-full bg-muted">
              <div className="h-2 w-3/5 rounded-full bg-primary" />
            </div>
            <div className="flex items-center gap-2 text-sm">
              <div className="rounded-full px-2.5 py-1 font-semibold text-[12px] bg-primary/15 text-primary">Badge</div>
              <span className="text-muted-foreground">Muted text</span>
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}

/**
 * Integration notes (drop-in):
 * 1) Wrap your app (or at least Layout.tsx) with <BYBThemeProvider>.
 * 2) Mount <ThemePicker /> on Profile → Appearance tab.
 * 3) Keep your existing CSS variables theme file in place — this picker only flips data attributes.
 */
